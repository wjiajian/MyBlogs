<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用Hexo通过GitHub Pages搭建博客笔记</title>
    <link href="/2025/10/30/Blogs/Blogs/"/>
    <url>/2025/10/30/Blogs/Blogs/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-Hexo-搭建个人博客"><a href="#使用-Hexo-搭建个人博客" class="headerlink" title="使用 Hexo 搭建个人博客"></a>使用 Hexo 搭建个人博客</h1><p>使用 Hexo 快速搭建一个功能强大的个人博客。</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><p>在开始之前，请确保电脑上已经安装了 <a href="https://nodejs.org/">Node.js</a> (推荐使用 LTS 版本) 和 <a href="https://git-scm.com/">Git</a>。</p><h2 id="2-Hexo-安装与初始化"><a href="#2-Hexo-安装与初始化" class="headerlink" title="2. Hexo 安装与初始化"></a>2. Hexo 安装与初始化</h2><ol><li><p><strong>创建博客根目录</strong><br>创建一个文件夹作为博客的根目录，例如 <code>myblogs</code>。</p></li><li><p><strong>全局安装 Hexo CLI</strong><br>打开终端，执行以下命令来安装 Hexo 命令行工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p><strong>初始化博客项目</strong><br>进入创建的博客根目录，然后执行以下命令来初始化一个新的 Hexo 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblogs<br><span class="hljs-built_in">cd</span> myblogs<br>npm install<br></code></pre></td></tr></table></figure><ul><li><code>hexo init myblogs</code> 会在当前目录下创建一个名为 <code>myblogs</code> 的新文件夹，并下载 Hexo 的基本文件。</li><li><code>cd myblogs</code> 进入博客项目目录。</li><li><code>npm install</code> 会根据 <code>package.json</code> 文件安装项目所需的依赖。</li></ul></li></ol><h2 id="3-本地预览"><a href="#3-本地预览" class="headerlink" title="3. 本地预览"></a>3. 本地预览</h2><p>本地预览博客效果，只需一行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>然后用浏览器访问 <code>http://localhost:4000</code>，即可看到默认主题下的博客了。</p><h2 id="4-部署到-GitHub-Pages"><a href="#4-部署到-GitHub-Pages" class="headerlink" title="4. 部署到 GitHub Pages"></a>4. 部署到 GitHub Pages</h2><ol><li><p><strong>安装 Git 部署插件</strong><br>为了能将博客部署到 GitHub Pages，需要安装 <code>hexo-deployer-git</code> 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p><strong>配置 <code>_config.yml</code></strong><br>打开博客根目录下的 <code>_config.yml</code> 文件，在文件末尾找到 <code>deploy</code> 配置项，并修改为对应的 GitHub 仓库地址：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;GitHub</span> <span class="hljs-string">仓库地址&gt;</span> <span class="hljs-comment"># 例如: https://github.com/user/repo.git</span><br>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>] <span class="hljs-comment"># 例如: main</span><br></code></pre></td></tr></table></figure></li><li><p><strong>一键部署</strong><br>依次执行以下命令，完成部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean      <span class="hljs-comment"># 清理缓存</span><br>hexo generate   <span class="hljs-comment"># 生成静态文件</span><br>hexo deploy     <span class="hljs-comment"># 部署到远端</span><br></code></pre></td></tr></table></figure><p>现在，访问 GitHub Pages 地址，就能看到博客了！</p></li></ol><h2 id="5-撰写新文章"><a href="#5-撰写新文章" class="headerlink" title="5. 撰写新文章"></a>5. 撰写新文章</h2><ol><li><p><strong>创建新文章</strong><br>执行以下命令来创建一篇新的文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;我的第一篇文章&quot;</span><br></code></pre></td></tr></table></figure><p>这会在 <code>source/_posts</code> 目录下生成一个 <code>我的第一篇文章.md</code> 文件。</p></li><li><p><strong>开始写作</strong><br>使用 Markdown 编辑器打开该文件，即可开始创作。</p></li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>Hexo</tag>
      
      <tag>Github</tag>
      
      <tag>blogs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gemini CLI 配置笔记</title>
    <link href="/2025/10/30/Gmini%20CLI/Gemini%20CLI/"/>
    <url>/2025/10/30/Gmini%20CLI/Gemini%20CLI/</url>
    
    <content type="html"><![CDATA[<h1 id="Gemini-CLI-安装指南"><a href="#Gemini-CLI-安装指南" class="headerlink" title="Gemini CLI 安装指南"></a>Gemini CLI 安装指南</h1><h2 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1. 安装 Node.js"></a>1. 安装 Node.js</h2><p>Gemini CLI 需要 Node.js 运行环境。推荐使用 <code>nvm</code> (Node Version Manager) 来安装和管理 Node.js 版本。</p><h3 id="1-1-安装-nvm"><a href="#1-1-安装-nvm" class="headerlink" title="1.1. 安装 nvm"></a>1.1. 安装 nvm</h3><ul><li><strong>Windows:</strong><ul><li>从 <a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows</a> 下载并运行最新的安装程序。</li></ul></li><li><strong>macOS &#x2F; Linux:</strong><ul><li>打开终端并运行以下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash<br></code></pre></td></tr></table></figure></li><li>关闭并重新打开终端。</li></ul></li></ul><h3 id="1-2-使用-nvm-安装-Node-js"><a href="#1-2-使用-nvm-安装-Node-js" class="headerlink" title="1.2. 使用 nvm 安装 Node.js"></a>1.2. 使用 nvm 安装 Node.js</h3><p>安装 <code>nvm</code> 后，在终端中运行以下命令来安装最新的 Node.js LTS 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install --lts<br>nvm use --lts<br></code></pre></td></tr></table></figure><p>验证 Node.js 是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node --version<br>npm --version<br></code></pre></td></tr></table></figure><h2 id="2-安装-Gemini-CLI"><a href="#2-安装-Gemini-CLI" class="headerlink" title="2. 安装 Gemini CLI"></a>2. 安装 Gemini CLI</h2><p>使用 <code>npm</code> (Node Package Manager) 全局安装 Gemini CLI：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g @google/gemini-cli<br></code></pre></td></tr></table></figure><p>安装完成后，验证 Gemini CLI 是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gemini --version<br></code></pre></td></tr></table></figure><h2 id="3-安装-VS-Code-拓展"><a href="#3-安装-VS-Code-拓展" class="headerlink" title="3. 安装 VS Code 拓展"></a>3. 安装 VS Code 拓展</h2><p>为了在 VS Code 中获得更好的体验，可以安装官方的 Gemini CLI 辅助拓展。</p><p>在 VS Code 的拓展市场中搜索并安装 “Gemini CLI Companion”。</p><h2 id="4-配置-Google-Cloud-环境"><a href="#4-配置-Google-Cloud-环境" class="headerlink" title="4. 配置 Google Cloud 环境"></a>4. 配置 Google Cloud 环境</h2><p>Gemini CLI 需要一个 Google Cloud 项目来进行身份验证和计费。</p><h3 id="4-1-创建或选择-Google-Cloud-项目"><a href="#4-1-创建或选择-Google-Cloud-项目" class="headerlink" title="4.1. 创建或选择 Google Cloud 项目"></a>4.1. 创建或选择 Google Cloud 项目</h3><ol><li>访问 <a href="https://console.cloud.google.com/">Google Cloud Console</a>。</li><li>如果您还没有项目，请创建一个新项目。</li><li>记下您的 <strong>Project ID</strong>。</li></ol><h3 id="4-2-启用所需的-API"><a href="#4-2-启用所需的-API" class="headerlink" title="4.2. 启用所需的 API"></a>4.2. 启用所需的 API</h3><p>您需要为您的项目启用 “Gemini for Google Cloud”。</p><ol><li>在 Google Cloud Console 中，导航到 “APIs &amp; Services” &gt; “Library”。</li><li>搜索 “Gemini for Google Cloud” 并启用它。</li></ol><h3 id="4-3-配置本地环境"><a href="#4-3-配置本地环境" class="headerlink" title="4.3. 配置本地环境"></a>4.3. 配置本地环境</h3><p>配置系统环境变量 GOOGLE_CLOUD_PROJECT，值为 <strong>Project ID</strong>。</p><h2 id="5-开始使用-Gemini-CLI"><a href="#5-开始使用-Gemini-CLI" class="headerlink" title="5. 开始使用 Gemini CLI"></a>5. 开始使用 Gemini CLI</h2><p>现在您可以开始使用 Gemini CLI 了。在终端中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gemini<br></code></pre></td></tr></table></figure><p>这会启动一个交互式的会话。您也可以直接在命令行中使用 <code>gemini</code> 命令，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gemini <span class="hljs-string">&quot;你好&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>Gemini CLI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MCP Server 笔记</title>
    <link href="/2025/10/30/MCP/MCP/"/>
    <url>/2025/10/30/MCP/MCP/</url>
    
    <content type="html"><![CDATA[<h1 id="MCP-模型上下文协议-简介"><a href="#MCP-模型上下文协议-简介" class="headerlink" title="MCP (模型上下文协议) 简介"></a>MCP (模型上下文协议) 简介</h1><p>MCP 起源于 2024 年 11 月 25 日 Anthropic 发布的文章：<a href="https://www.anthropic.com/news/model-context-protocol">Introducing the Model Context Protocol</a><br>MCP 是一个开放协议，它为应用程序向 LLM 提供上下文的方式进行了标准化。你可以将 MCP 想象成 AI 应用程序的 USB-C 接口。就像 USB-C 为设备连接各种外设和配件提供了标准化的方式一样，MCP 为 AI 模型连接各种数据源和工具提供了标准化的接口。<br>MCP 服务器可以：</p><ul><li>通过 <strong>Resources</strong> 公开数据（可以将其视为类似 GET 端点；用于将信息加载到 LLM 的上下文中）</li><li>通过 <strong>Tools</strong> 提供功能（类似 POST 端点；用于执行代码或产生副作用）</li><li>通过 <strong>Prompts</strong> 定义交互模式（LLM 交互的可重用模板）</li></ul><h1 id="为什么选择-MCP？"><a href="#为什么选择-MCP？" class="headerlink" title="为什么选择 MCP？"></a>为什么选择 MCP？</h1><p>我认为 MCP 的出现是 prompt engineering 发展的产物。更结构化的上下文信息对模型的效果提升是显著的。我们在构造 prompt 时，希望能提供一些更特殊的信息（比如本地文件，数据库，一些网络实时信息等）给模型，这样模型更容易理解真实场景中的问题。</p><p><strong>想象一下没有 MCP 之前我们会怎么做？</strong> 我们可能会人工从数据库中筛选或者使用工具检索可能需要的信息，手动的粘贴到 prompt 中。随着我们要解决的问题越来越复杂，手工把信息引入到 prompt 中会变得越来越困难。</p><p>为了克服手工 prompt 的局限性，许多 LLM 平台（如 OpenAI、Google）引入了 function call（将自然语言转换为 API 调用） 功能。这一机制允许模型在需要时调用预定义的函数来获取数据或执行操作，显著提升了自动化水平。</p><p>对比之下 MCP 的优势在于：<br><strong>生态</strong> - MCP 提供很多现成的插件 <a href="https://mcpmarket.cn/">MCP Market</a>，你的 AI 可以直接使用。<br><strong>统一性</strong> - 不限制于特定的 AI 模型，任何支持 MCP 的模型都可以灵活切换。<br><strong>数据安全</strong> - 你的敏感数据留在自己的电脑上，不必全部上传。（因为我们可以自行设计接口确定传输哪些数据）</p><h1 id="通用架构"><a href="#通用架构" class="headerlink" title="通用架构"></a>通用架构</h1><p><img src="/images/mcp/jiagou.png" alt="MCP通用架构"><br>MCP 核心采用客户端-服务器架构，主机应用可以连接多个服务器：</p><ul><li><strong>MCP Hosts</strong>: 如 Claude Desktop、IDE(VS Code, Pycharm) 或 AI 工具，希望通过 MCP 访问数据的程序</li><li><strong>MCP Clients</strong>: 维护与服务器一对一连接的协议客户端</li><li><strong>MCP Servers</strong>: 轻量级程序，通过标准的 Model Context Protocol 提供特定能力</li><li><strong>本地数据源</strong>: MCP 服务器可安全访问的计算机文件、数据库和服务</li><li><strong>远程服务</strong>: MCP 服务器可连接的互联网上的外部系统（如通过 APIs）</li></ul><p>让我们通过一个实际场景来理解这些组件如何协同工作：<br>假设你正在使用 VS Code (Host) 询问：”曼哈顿的天气怎么样？”</p><ul><li><strong>Host</strong>：VS Code 作为 Host，负责接收你的提问并与 LLM 交互。</li><li><strong>Client</strong>：当 LLM 模型决定需要获取天气信息时，Host 中内置的 MCP Client 会被激活。这个 Client 负责与适当的 MCP Server 建立连接。</li><li><strong>Server</strong>：在这个例子中，文件系统 MCP Server 会被调用。它负责查询和格式化来自 National Weather Service API 的数据。</li></ul><p>整个流程是这样的：你的问题 → VS Code(Host) → LLM 模型 → 需要天气信息 → MCP Client 连接 → 天气系统 MCP Server → 执行操作 → 返回结果 → LLM 生成回答 → 显示在 VS Code 上。</p><p>这种架构设计使得 LLM 可以在不同场景下灵活调用各种工具和数据源，而开发者只需专注于开发对应的 MCP Server，无需关心 Host 和 Client 的实现细节。</p><h1 id="面向服务器开发者"><a href="#面向服务器开发者" class="headerlink" title="面向服务器开发者"></a>面向服务器开发者</h1><p>使用 MCP 使 LLM 获取天气预报和恶劣天气警报的能力。</p><p>导入 packages 并设置 instance</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><span class="hljs-keyword">import</span> httpx<br><span class="hljs-keyword">from</span> mcp.server.fastmcp <span class="hljs-keyword">import</span> FastMCP<br><br><span class="hljs-comment"># 初始化 FastMCP server</span><br>mcp = FastMCP(<span class="hljs-string">&quot;weather&quot;</span>)<br><br><span class="hljs-comment"># Constants</span><br>NWS_API_BASE = <span class="hljs-string">&quot;https://api.weather.gov&quot;</span><br>USER_AGENT = <span class="hljs-string">&quot;weather-app/1.0&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Helper-Functions"><a href="#Helper-Functions" class="headerlink" title="Helper Functions"></a>Helper Functions</h3><p>添加 Helper Functions，用于查询和格式化来自 National Weather Service API 的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_nws_request</span>(<span class="hljs-params">url: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>] | <span class="hljs-literal">None</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;向 NWS API 发送请求，并进行适当的错误处理。&quot;&quot;&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: USER_AGENT,<br>        <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;application/geo+json&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> httpx.AsyncClient() <span class="hljs-keyword">as</span> client:<br>        <span class="hljs-keyword">try</span>:<br>            response = <span class="hljs-keyword">await</span> client.get(url, headers=headers, timeout=<span class="hljs-number">30.0</span>)<br>            response.raise_for_status()<br>            <span class="hljs-keyword">return</span> response.json()<br>        <span class="hljs-keyword">except</span> Exception:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">format_alert</span>(<span class="hljs-params">feature: <span class="hljs-built_in">dict</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;将警报 feature 格式化为可读的字符串。&quot;&quot;&quot;</span><br>    props = feature[<span class="hljs-string">&quot;properties&quot;</span>]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">事件: <span class="hljs-subst">&#123;props.get(<span class="hljs-string">&#x27;event&#x27;</span>, <span class="hljs-string">&#x27;Unknown&#x27;</span>)&#125;</span></span><br><span class="hljs-string">区域: <span class="hljs-subst">&#123;props.get(<span class="hljs-string">&#x27;areaDesc&#x27;</span>, <span class="hljs-string">&#x27;Unknown&#x27;</span>)&#125;</span></span><br><span class="hljs-string">严重性: <span class="hljs-subst">&#123;props.get(<span class="hljs-string">&#x27;severity&#x27;</span>, <span class="hljs-string">&#x27;Unknown&#x27;</span>)&#125;</span></span><br><span class="hljs-string">描述: <span class="hljs-subst">&#123;props.get(<span class="hljs-string">&#x27;description&#x27;</span>, <span class="hljs-string">&#x27;No description available&#x27;</span>)&#125;</span></span><br><span class="hljs-string">指示: <span class="hljs-subst">&#123;props.get(<span class="hljs-string">&#x27;instruction&#x27;</span>, <span class="hljs-string">&#x27;No specific instructions provided&#x27;</span>)&#125;</span></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Tool-Execution"><a href="#Tool-Execution" class="headerlink" title="Tool Execution"></a>Tool Execution</h3><p>Tool Execution Handler 负责实际执行每个 tool 的逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@mcp.tool()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_alerts</span>(<span class="hljs-params">state: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;获取美国州的天气警报。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        state: 两个字母的美国州代码（例如 CA、NY）</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;NWS_API_BASE&#125;</span>/alerts/active/area/<span class="hljs-subst">&#123;state&#125;</span>&quot;</span><br>    data = <span class="hljs-keyword">await</span> make_nws_request(url)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;features&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;无法获取警报或未找到警报。&quot;</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data[<span class="hljs-string">&quot;features&quot;</span>]:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;该州没有活跃的警报。&quot;</span><br><br>    alerts = [format_alert(feature) <span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> data[<span class="hljs-string">&quot;features&quot;</span>]]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\n---\n&quot;</span>.join(alerts)<br><br><span class="hljs-meta">@mcp.tool()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_forecast</span>(<span class="hljs-params">latitude: <span class="hljs-built_in">float</span>, longitude: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;获取某个位置的天气预报。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        latitude: 位置的纬度</span><br><span class="hljs-string">        longitude: 位置的经度</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 首先获取预报网格 endpoint</span><br>    points_url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;NWS_API_BASE&#125;</span>/points/<span class="hljs-subst">&#123;latitude&#125;</span>,<span class="hljs-subst">&#123;longitude&#125;</span>&quot;</span><br>    points_data = <span class="hljs-keyword">await</span> make_nws_request(points_url)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> points_data:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;无法获取此位置的预报数据。&quot;</span><br><br>    <span class="hljs-comment"># 从 points response 中获取预报 URL</span><br>    forecast_url = points_data[<span class="hljs-string">&quot;properties&quot;</span>][<span class="hljs-string">&quot;forecast&quot;</span>]<br>    forecast_data = <span class="hljs-keyword">await</span> make_nws_request(forecast_url)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> forecast_data:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;无法获取详细预报。&quot;</span><br><br>    <span class="hljs-comment"># 将 periods 格式化为可读的预报</span><br>    periods = forecast_data[<span class="hljs-string">&quot;properties&quot;</span>][<span class="hljs-string">&quot;periods&quot;</span>]<br>    forecasts = []<br>    <span class="hljs-keyword">for</span> period <span class="hljs-keyword">in</span> periods[:<span class="hljs-number">5</span>]:  <span class="hljs-comment"># 仅显示接下来的 5 个 periods</span><br>        forecast = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string"><span class="hljs-subst">&#123;period[<span class="hljs-string">&#x27;name&#x27;</span>]&#125;</span>:</span><br><span class="hljs-string">温度: <span class="hljs-subst">&#123;period[<span class="hljs-string">&#x27;temperature&#x27;</span>]&#125;</span>°<span class="hljs-subst">&#123;period[<span class="hljs-string">&#x27;temperatureUnit&#x27;</span>]&#125;</span></span><br><span class="hljs-string">风: <span class="hljs-subst">&#123;period[<span class="hljs-string">&#x27;windSpeed&#x27;</span>]&#125;</span> <span class="hljs-subst">&#123;period[<span class="hljs-string">&#x27;windDirection&#x27;</span>]&#125;</span></span><br><span class="hljs-string">预报: <span class="hljs-subst">&#123;period[<span class="hljs-string">&#x27;detailedForecast&#x27;</span>]&#125;</span></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>        forecasts.append(forecast)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\n---\n&quot;</span>.join(forecasts)<br></code></pre></td></tr></table></figure><p>初始化并运行 server：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>() -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;模块入口，供 `python -m weather` 或 `weather:main` 脚本调用。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    该函数会启动 MCP server 并阻塞，使用 stdio 作为传输层（用于 VS Code MCP 集成）。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    mcp.run(transport=<span class="hljs-string">&quot;stdio&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 直接运行时打印错误再抛出，便于调试依赖或运行时问题</span><br>    <span class="hljs-keyword">try</span>:<br>        main()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">import</span> sys<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;启动 MCP 服务失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>        <span class="hljs-keyword">raise</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">uv <span class="hljs-built_in">run</span> weather.py<br></code></pre></td></tr></table></figure><h1 id="在-VS-Code-上的使用效果"><a href="#在-VS-Code-上的使用效果" class="headerlink" title="在 VS Code 上的使用效果"></a>在 VS Code 上的使用效果</h1><p><img src="/images/mcp/result.png" alt="Copilot"><br><img src="/images/mcp/server.png" alt="Server"></p><h1 id="附录一：使用-uv-创建-MCP-虚拟环境"><a href="#附录一：使用-uv-创建-MCP-虚拟环境" class="headerlink" title="附录一：使用 uv 创建 MCP 虚拟环境"></a>附录一：使用 uv 创建 MCP 虚拟环境</h1><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">uv</span> venv     <span class="hljs-comment">//在当前工作目录创建uv虚拟环境</span><br><span class="hljs-symbol">.venv</span>\Scripts\activate      <span class="hljs-comment">//启动虚拟环境</span><br><span class="hljs-symbol">uv</span> <span class="hljs-keyword">add</span> mcp[cli] httpx       <span class="hljs-comment">//安装依赖包</span><br></code></pre></td></tr></table></figure><h1 id="附录二：VS-Code-中配置-MCP-服务"><a href="#附录二：VS-Code-中配置-MCP-服务" class="headerlink" title="附录二：VS Code 中配置 MCP 服务"></a>附录二：VS Code 中配置 MCP 服务</h1><p><code>chat.mcp.access </code> 设置控制哪些 MCP 服务器可以在 VS Code 中安装和运行<br><code>all</code>（默认）：允许所有 MCP 服务器<br><code>registry</code>：只允许来自注册表的 MCP 服务器<br><code>none</code>：不允许任何 MCP 服务器</p><blockquote><p>MCP 服务器可以在你的机器上运行任意代码。只添加来自受信任来源的服务器，并在启动前审查发布者和服务器配置。</p></blockquote><h3 id="将-MCP-服务器添加到工作区-mcp-json-文件"><a href="#将-MCP-服务器添加到工作区-mcp-json-文件" class="headerlink" title="将 MCP 服务器添加到工作区 mcp.json 文件"></a>将 MCP 服务器添加到工作区 <code>mcp.json</code> 文件</h3><ul><li>在你的工作区中创建 .VS Codeode&#x2F;mcp.json 文件。</li><li>选择编辑器中的添加服务器按钮以添加新服务器的模板。VS Code 为 MCP 服务器配置文件提供了智能感知。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;servers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;weather&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stdio&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;uv&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;--directory&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;C:\\Users\\Admin\\Desktop\\MCP&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;run&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;weather.py&quot;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="在代理模式中使用-MCP-工具"><a href="#在代理模式中使用-MCP-工具" class="headerlink" title="在代理模式中使用 MCP 工具"></a>在代理模式中使用 MCP 工具</h3><p>添加 MCP 服务器后，在代理模式下使用它提供的工具。</p><ul><li>打开聊天视图（Ctrl+Alt+I），然后从下拉列表中选择代理模式<br><img src="/images/mcp/mode.png" alt="MCP"></li><li>选择工具按钮以查看可用工具列表。<br><img src="/images/mcp/vsc_mcp.png" alt="Agent"></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>MCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
